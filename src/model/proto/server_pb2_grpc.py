# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import server_pb2 as server__pb2


class ServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ping_server = channel.unary_unary(
                '/messages.Server/ping_server',
                request_serializer=server__pb2.PingServerRequest.SerializeToString,
                response_deserializer=server__pb2.PingServerReply.FromString,
                )
        self.get_ip_list = channel.unary_unary(
                '/messages.Server/get_ip_list',
                request_serializer=server__pb2.GetIpListRequest.SerializeToString,
                response_deserializer=server__pb2.GetIpListReply.FromString,
                )
        self.initiate_connection = channel.unary_unary(
                '/messages.Server/initiate_connection',
                request_serializer=server__pb2.InitiateConnectionRequest.SerializeToString,
                response_deserializer=server__pb2.InitiateConnectionReply.FromString,
                )


class ServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ping_server(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_ip_list(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def initiate_connection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ping_server': grpc.unary_unary_rpc_method_handler(
                    servicer.ping_server,
                    request_deserializer=server__pb2.PingServerRequest.FromString,
                    response_serializer=server__pb2.PingServerReply.SerializeToString,
            ),
            'get_ip_list': grpc.unary_unary_rpc_method_handler(
                    servicer.get_ip_list,
                    request_deserializer=server__pb2.GetIpListRequest.FromString,
                    response_serializer=server__pb2.GetIpListReply.SerializeToString,
            ),
            'initiate_connection': grpc.unary_unary_rpc_method_handler(
                    servicer.initiate_connection,
                    request_deserializer=server__pb2.InitiateConnectionRequest.FromString,
                    response_serializer=server__pb2.InitiateConnectionReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'messages.Server', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Server(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ping_server(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/messages.Server/ping_server',
            server__pb2.PingServerRequest.SerializeToString,
            server__pb2.PingServerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_ip_list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/messages.Server/get_ip_list',
            server__pb2.GetIpListRequest.SerializeToString,
            server__pb2.GetIpListReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def initiate_connection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/messages.Server/initiate_connection',
            server__pb2.InitiateConnectionRequest.SerializeToString,
            server__pb2.InitiateConnectionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
