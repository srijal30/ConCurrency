syntax = "proto3";
package messages;

///Blockchain Data Model
message BlockChain {
  repeated Block blocks = 1;
};

message Block {
  string prev_hash = 1;
  string curr_hash = 2;
  uint64 nonce = 3;
  string merkle_root = 4;
  repeated Transaction trans = 5;
  string miner_pub_key = 6;
  uint64 reward = 7;
  uint64 difficulty = 8;
  double timestamp = 9;
};

/*
TO DO:
  - Add UUID like component
  - Add a timestamp
*/
message Transaction {
  string hash = 1;
  string sender_pub_key = 2;
  string receiver_pub_key = 3;
  string signature = 4;
  uint64 amount = 5;
  uint64 sequence = 6;
}

message Snapshot{
  // the key will be pub_key address in PEM format
  map<string, Account> accounts = 1;
}

message Account{
  uint64 balance = 1;
  uint64 sequence = 2;
}


service Network{
  /// CLIENT SENDS
  //announce block from client to server
  rpc announce_block(AnnounceBlockRequest) returns (AnnounceBlockReply) {};
  
  //send transaction from client to server
  rpc send_transaction(SendTransactionRequest) returns (SendTransactionReply) {};

  /// CLIENT RECEIVES
  //receive block from server to client
  rpc get_block(GetBlockRequest) returns (GetBlockReply) {};

  //receive transaction from server to client
  rpc request_transaction(RequestTransactionRequest) returns (RequestTransactionReply) {};
  
  //receive length of chain from other servers
  rpc request_chain_length(RequestChainLength) returns (RequestChainLengthReply) {};

  //receive missing blocks??
  //receive all block hashes??
  
  /*
  TO DO:
  - add in rpc that are for querying (so far only methods that are essential for consensus are added)
  */
}

message AnnounceBlockRequest{
  Block block = 1;
}

message AnnounceBlockReply{
}

message SendTransactionRequest{
  Transaction transaction = 1;
}

message SendTransactionReply{
}

// QUESTION: how should the block be requested?
message GetBlockRequest{
  string hash = 1;  
}

message GetBlockReply{
  Block block = 1;
}

message RequestTransactionRequest{
  string hash = 1; //this might get updated to uuid in the future
}

message RequestTransactionReply{
  Transaction transaction = 1;
}

